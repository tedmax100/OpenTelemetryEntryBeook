x-default-logging: &logging
  driver: "fluentd"
  options:
    fluentd-async-connect: "true"
    fluentd-address: "localhost:24224"
    tag: "{{.Name}}"

networks:
  demo:
    name: demo
    driver: bridge

services:
  fluentd:
    image: fluent/fluent-bit:3.1-debug
    volumes:
        - ./infrastructure/fluentbit:/fluent-bit/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    hostname: fluentd
    depends_on:
      - otelcol
    networks:
      - demo
  # Grafana
  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - "GF_INSTALL_PLUGINS=grafana-googlesheets-datasource"
    ports:
      - "8300:3000"
    networks:
      - demo

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.106.1
    container_name: otelcol
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./infrastructure/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133" # health_check extension
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/"]
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - tempo
    networks:
      - demo

  # Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yml -config.expand-env=true
    volumes:
      - ./infrastructure/loki/loki.yml:/etc/loki/local-config.yml
    ports:
      - "3100:3100"
    networks:
      - demo

  # Tempo
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./infrastructure/tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4327:4317"  # otlp grpc
      #- "4328:4318"  # otlp http
    networks:
      - demo
      
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    deploy:
      resources:
        limits:
          memory: 500M
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: demo
      RABBITMQ_DEFAULT_PASS: demo
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics" ,"-q", "ping"]
      timeout: 3s
      retries: 12
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - demo

  proxy:
    image: nginx:1.27.0-otel
    container_name: proxy
    restart: unless-stopped
    volumes:
      - ./infrastructure/nginx/default.conf:/etc/nginx/nginx.conf
    ports:
      - 8001:80
    logging: *logging
    networks:
      - demo

  # # api
  # api:
  #   container_name: api
  #   build:
  #     context: ./services/api
  #     dockerfile: dockerfile
  #   # environment:
  #   ports:
  #     - 8080:8080
  #   restart: always
  #   depends_on:
  #     - otelcol
  #     - rabbitmq
  #   extra_hosts:
  #     - "host.docker.internal:192.168.1.100"

  # # Worker
  # worker:
  #   container_name: worker
  #   build:
  #     context: ./services/worker
  #     dockerfile: dockerfile
  #   # environment:
  #   restart: always
  #   depends_on:
  #     - otelcol
  #     - rabbitmq

  # # internal_service
  # internal_service:
  #   container_name: internal_service
  #   build:
  #     context: ./services/internal_service
  #     dockerfile: dockerfile
  #   environment:
  #     - OTEL_TRACES_EXPORTER=otlp
  #     #- OTEL_LOGS_EXPORTER=otlp
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4318
  #     - OTEL_NODE_RESOURCE_DETECTORS=all
  #     - OTEL_SERVICE_NAME=internal_service
  #     - OTEL_PROPAGATORS=tracecontext,baggage
  #     #- NODE_OPTIONS=--require @opentelemetry/auto-instrumentations-node/register
  #     - OTEL_NODE_ENABLED_INSTRUMENTATIONS=http,express
  #   ports:
  #     - 3000:3000 # for echo_service
  #   restart: always
  #   depends_on:
  #     - otelcol
  #     - rabbitmq
  