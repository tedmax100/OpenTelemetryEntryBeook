x-default-logging: &logging
  driver: "fluentd"
  options:
    fluentd-async-connect: "true"
    fluentd-address: "localhost:24224"
    tag: "{{.Name}}"

networks:
  demo:
    name: demo
    driver: bridge

services:
  fluentd:
    image: fluent/fluent-bit:3.1-debug
    volumes:
        - ./infrastructure/fluentbit:/fluent-bit/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    hostname: fluentd
    depends_on:
      - otelcol
    networks:
      - demo
  # Grafana
  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - "GF_INSTALL_PLUGINS=grafana-googlesheets-datasource"
    volumes:
      - ./infrastructure/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "8300:3000"
    networks:
      - demo

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.100.0
    container_name: otelcol
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./infrastructure/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - tempo
      - prometheus
    networks:
      - demo

  # Tempo
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./infrastructure/tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4327:4317"  # otlp grpc
      #- "4328:4318"  # otlp http
    networks:
      - demo

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.53.1
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=remote-write-receiver
    volumes:
      - ./infrastructure/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - demo

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    deploy:
      resources:
        limits:
          memory: 500M
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: demo
      RABBITMQ_DEFAULT_PASS: demo
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics" ,"-q", "ping"]
      timeout: 3s
      retries: 12
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - demo

  # proxy:
  #   image: nginx:1.27.0-otel
  #   container_name: proxy
  #   restart: unless-stopped
  #   volumes:
  #     - ./infrastructure/nginx/default.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - 8001:80
  #   networks:
  #     - demo

  # api
  api:
    container_name: api
    build:
      context: ./services
      dockerfile: ./api/dockerfile
    # environment:
    ports:
      - 8079:8080
    restart: always
    depends_on:
      - otelcol
      - rabbitmq
    networks:
      - demo

  # # Worker
  worker:
    container_name: worker
    build:
      context: ./services
      dockerfile: ./worker/dockerfile
    # environment:
    restart: always
    depends_on:
      - otelcol
      - rabbitmq
    networks:
      - demo
  

  # internal_service
  internal_service:
    container_name: internal_service
    build:
      context: ./services
      dockerfile: ./internal_service/dockerfile
    ports:
      - 8081:8080 # for echo_service
    restart: always
    depends_on:
      - otelcol
    networks:
      - demo
  