/*
 * Swagger Petstore - OpenAPI 3.1
 * This is a sample Pet Store Server based on the OpenAPI 3.1 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.6.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://petstore3.swagger.io/api/v3";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let apiKey = "TODO_EDIT_THE_API_KEY";

export default function() {
    group("/pet", () => {

        // Request No. 1: updatePet
        {
            let url = BASE_URL + `/pet`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "name": "string", "category": {"id": "long", "name": "string"}, "photoUrls": "list", "tags": "list", "status": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Successful operation": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: addPet
        {
            let url = BASE_URL + `/pet`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "name": "string", "category": {"id": "long", "name": "string"}, "photoUrls": "list", "tags": "list", "status": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Successful operation": (r) => r.status === 200
            });
        }
    });

    group("/user/{username}", () => {
        let username = 'TODO_EDIT_THE_USERNAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getUserByName
        {
            let url = BASE_URL + `/user/${username}`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteUser
        {
            let url = BASE_URL + `/user/${username}`;
            let request = http.del(url);

        }
    });

    group("/pet/findByStatus", () => {
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: findPetsByStatus
        {
            let url = BASE_URL + `/pet/findByStatus?status=${status}`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/user/createWithList", () => {

        // Request No. 1: createUsersWithListInput
        {
            let url = BASE_URL + `/user/createWithList`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Successful operation": (r) => r.status === 200
            });
            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/pet/{petId}/uploadImage", () => {
        let petId = 'TODO_EDIT_THE_PETID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let additionalMetadata = 'TODO_EDIT_THE_ADDITIONALMETADATA'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: uploadFile
        {
            let url = BASE_URL + `/pet/${petId}/uploadImage?additionalMetadata=${additionalMetadata}`;
            let params = {headers: {"Content-Type": "application/octet-stream", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/store/inventory", () => {

        // Request No. 1: getInventory
        {
            let url = BASE_URL + `/store/inventory`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/user/login", () => {
        let password = 'TODO_EDIT_THE_PASSWORD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let username = 'TODO_EDIT_THE_USERNAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: loginUser
        {
            let url = BASE_URL + `/user/login?username=${username}&password=${password}`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/user", () => {

        // Request No. 1: createUser
        {
            let url = BASE_URL + `/user`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "username": "string", "firstName": "string", "lastName": "string", "email": "string", "password": "string", "phone": "string", "userStatus": "integer"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/pet/findByTags", () => {
        let tags = 'TODO_EDIT_THE_TAGS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: findPetsByTags
        {
            let url = BASE_URL + `/pet/findByTags?tags=${tags}`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/store/order", () => {

        // Request No. 1: placeOrder
        {
            let url = BASE_URL + `/store/order`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "petId": "long", "quantity": "integer", "shipDate": "date", "status": "string", "complete": "boolean"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/user/logout", () => {

        // Request No. 1: logoutUser
        {
            let url = BASE_URL + `/user/logout`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });
        }
    });

    group("/pet/{petId}", () => {
        let petId = 'TODO_EDIT_THE_PETID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPetById
        {
            let url = BASE_URL + `/pet/${petId}`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deletePet
        {
            let url = BASE_URL + `/pet/${petId}`;
            let params = {headers: {"api_key": `${apiKey}`, "Accept": "application/json"}};
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

        }
    });

    group("/store/order/{orderId}", () => {
        let orderId = 'TODO_EDIT_THE_ORDERID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrderById
        {
            let url = BASE_URL + `/store/order/${orderId}`;
            let request = http.get(url);

            check(request, {
                "successful operation": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: deleteOrder
        {
            let url = BASE_URL + `/store/order/${orderId}`;
            let request = http.del(url);

        }
    });

}
