// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import URI from "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  group("Auth: Digest", function() {
    postman[Request]({
      name: "DigestAuth Request",
      id: "d5434b1b-a8a3-454e-a0d6-84c65302deef",
      method: "GET",
      address: "https://postman-echo.com/digest-auth",
      data: {
        code: "xWnkliVQJURqB2x1",
        grant_type: "authorization_code",
        redirect_uri: "https://www.getpostman.com/oauth2/callback",
        client_id: "abc123",
        client_secret: "ssh-secret"
      },
      post(response) {
        tests["response code is 401"] = responseCode.code === 401;
        tests[
          "response has WWW-Authenticate header"
        ] = postman.getResponseHeader("WWW-Authenticate");

        var authenticateHeader = postman.getResponseHeader("WWW-Authenticate"),
          realmStart =
            authenticateHeader.indexOf(
              '"',
              authenticateHeader.indexOf("realm")
            ) + 1,
          realmEnd = authenticateHeader.indexOf('"', realmStart),
          realm = authenticateHeader.slice(realmStart, realmEnd),
          nonceStart =
            authenticateHeader.indexOf(
              '"',
              authenticateHeader.indexOf("nonce")
            ) + 1,
          nonceEnd = authenticateHeader.indexOf('"', nonceStart),
          nonce = authenticateHeader.slice(nonceStart, nonceEnd);

        postman.setGlobalVariable("echo_digest_realm", realm);
        postman.setGlobalVariable("echo_digest_nonce", nonce);
      }
    });

    postman[Request]({
      name: "DigestAuth Success",
      id: "3840e42e-c9ef-4828-b705-9bd8e0392725",
      method: "GET",
      address: "https://postman-echo.com/digest-auth",
      data: {},
      headers: {
        Authorization:
          'Digest username="postman", realm="Users", nonce="ni1LiL0O37PRRhofWdCLmwFsnEtH1lew", uri="/digest-auth", response="254679099562cf07df9b6f5d8d15db44", opaque=""'
      },
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
        tests["body contains authenticated"] = responseBody.has(
          "authenticated"
        );
      },
      auth(config, Var) {
        const address = new URI(config.address);
        address.username(__ENV.USER_NAME);
        address.password(__ENV.PASSWORD);
        config.address = address.toString();
        config.options.auth = "digest";
      }
    });
  });

  group("Auth: Others", function() {
    postman[Request]({
      name: "Basic Auth",
      id: "598f8d5a-32a9-4db5-b903-f0b2fdef9063",
      method: "GET",
      address: "https://postman-echo.com/basic-auth",
      data: {},
      headers: {
        Authorization: "Basic cG9zdG1hbjpwYXNzd29yZA=="
      },
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
        tests["Body contains authenticated"] = responseBody.has(
          "authenticated"
        );
      },
      auth(config, Var) {
        const address = new URI(config.address);
        address.username(__ENV.USER_NAME);
        address.password(__ENV.PASSWORD);
        config.address = address.toString();
        config.options.auth = "basic";
      }
    });
  });

  group("Cookies", function() {
    postman[Request]({
      name: "Set Cookies",
      id: "268619af-5cb0-41e4-96e1-0b7eb0f4184a",
      method: "GET",
      address: "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
      data: {},
      post(response) {
        tests["Status code is 200"] = responseCode.code === 200;
        tests["Body contains cookies"] = responseBody.has("cookies");
        var body = JSON.parse(responseBody);
        tests["Body contains cookie foo1"] = "foo1" in body.cookies;
        tests["Body contains cookie foo2"] = "foo2" in body.cookies;
      }
    });

    postman[Request]({
      name: "Get Cookies",
      id: "00ce45bd-4ff8-4731-8ce0-2d22c8e77e3e",
      method: "GET",
      address: "https://postman-echo.com/cookies",
      data: {},
      post(response) {
        tests["Status code is 200"] = responseCode.code === 200;
        tests["Body contains cookies"] = responseBody.has("cookies");
        var body = JSON.parse(responseBody);
        tests["Body contains cookie foo2"] = "foo2" in body.cookies;
      }
    });

    postman[Request]({
      name: "Delete Cookies",
      id: "21c97eec-5893-46a3-b4b1-3876e97dd163",
      method: "GET",
      address: "https://postman-echo.com/cookies/delete?foo1=",
      data: {},
      post(response) {
        tests["Status code is 200"] = responseCode.code === 200;
        tests["Body contains key cookies"] = responseBody.has("cookies");
        var body = JSON.parse(responseBody);
        tests["Body contains cookie foo2"] = "foo2" in body.cookies;
        tests["Body does not contain cookie foo1"] = !("foo1" in body.cookies);
      }
    });
  });

  group("Headers", function() {
    postman[Request]({
      name: "Request Headers",
      id: "dfbed8bd-2ee3-420e-9f88-adf507f35f90",
      method: "GET",
      address: "https://postman-echo.com/headers",
      data: {},
      headers: {
        "my-sample-header": "test"
      },
      post(response) {
        tests["Body contains headers"] = responseBody.has("headers");

        var data = JSON.parse(responseBody).headers;

        tests["Header contains host"] = "host" in data;
        tests["Header contains test parameter sent as part of request header"] =
          "my-sample-header" in data;
      }
    });

    postman[Request]({
      name: "Response Headers",
      id: "0f968ead-c6d1-439a-bd89-d069ed0cd554",
      method: "GET",
      address:
        "https://postman-echo.com/response-headers?Content-Type=text/html&Server=apibin",
      data: {
        code: "xWnkliVQJURqB2x1",
        grant_type: "authorization_code",
        redirect_uri: "https://www.getpostman.com/oauth2/callback",
        client_id: "abc123",
        client_secret: "ssh-secret"
      },
      post(response) {
        tests["Body contains Content-Type"] = responseBody.has("Content-Type");
        tests["Body contains Server"] = responseBody.has("Server");
      }
    });
  });

  group("Request Methods", function() {
    postman[Request]({
      name: "GET Request ",
      id: "f1b4a572-3b09-4360-b3b9-be05c34dc797",
      method: "GET",
      address: "https://postman-echo.com/get?test=123",
      data: {
        code: "xWnkliVQJURqB2x1",
        grant_type: "authorization_code",
        redirect_uri: "https://www.getpostman.com/oauth2/callback",
        client_id: "abc123",
        client_secret: "ssh-secret"
      },
      post(response) {
        tests["Body contains headers"] = responseBody.has("headers");
        tests["Body contains args"] = responseBody.has("args");
        tests["Body contains url"] = responseBody.has("url");

        var data = JSON.parse(responseBody);

        tests["Args key contains argument passed as url parameter"] =
          "test" in data.args;
      }
    });

    postman[Request]({
      name: "POST Request",
      id: "00b8274a-6c85-410b-9aa3-ac4464d20285",
      method: "POST",
      address: "https://postman-echo.com/post",
      data:
        "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.",
      headers: {
        "Content-Type": "text/plain"
      },
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
        } catch (e) {}

        tests["response has data"] =
          responseJSON && responseJSON.data && responseJSON.data.length === 256;
        tests["content-type equals text/plain"] =
          responseJSON &&
          responseJSON.headers &&
          responseJSON.headers["content-type"] === "text/plain";
      }
    });

    postman[Request]({
      name: "PUT Request",
      id: "6c85525d-ab0a-48d6-8db1-ff09a38b8857",
      method: "PUT",
      address: "https://postman-echo.com/put",
      data:
        "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",
      headers: {
        "Content-Type": "text/plain"
      },
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
        } catch (e) {}

        tests["Body contains files"] = responseBody.has("files");
        tests["Body contains args"] = responseBody.has("args");
        tests["Body contains form"] = responseBody.has("form");
        tests["Body contains headers"] = responseBody.has("headers");
        tests["Body contains url"] = responseBody.has("url");

        tests["Data has been passed"] =
          responseJSON && responseJSON.data && responseJSON.data.length;
      }
    });

    postman[Request]({
      name: "PATCH Request",
      id: "bfd40ef6-fed6-4477-82d7-0445937248f3",
      method: "PATCH",
      address: "https://postman-echo.com/patch",
      data: "test",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      post(response) {
        tests["Body contains files"] = responseBody.has("files");
        tests["Body contains args"] = responseBody.has("args");
        tests["Body contains form"] = responseBody.has("form");
        tests["Body contains headers"] = responseBody.has("headers");
        tests["Body contains url"] = responseBody.has("url");

        var data = JSON.parse(responseBody);

        tests["form key has data passed in as form-data"] = "test" in data.form;
      }
    });

    postman[Request]({
      name: "DELETE Request",
      id: "c65a6c99-4fdc-48e3-b7b3-80d1b314876a",
      method: "DELETE",
      address: "https://postman-echo.com/delete",
      data: "test",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      post(response) {
        tests["Body contains files"] = responseBody.has("files");
        tests["Body contains args"] = responseBody.has("args");
        tests["Body contains form"] = responseBody.has("form");
        tests["Body contains headers"] = responseBody.has("headers");
        tests["Body contains url"] = responseBody.has("url");

        var data = JSON.parse(responseBody);

        tests["form key has data passed in as form-data"] = "test" in data.form;
      }
    });
  });

  group("Utilities", function() {
    postman[Request]({
      name: "Response Status Code",
      id: "8c6710d3-b977-4440-b1a5-991418be7f12",
      method: "GET",
      address: "https://postman-echo.com/status/200",
      data: {
        test: "123"
      },
      post(response) {
        tests["Body contains status"] = responseBody.has("status");

        var data = JSON.parse(responseBody);

        tests["Status equals 200"] = data.status === 200;
      }
    });

    postman[Request]({
      name: "Streamed Response",
      id: "808a0cde-1af8-49a6-80d5-c0ae6e4aa01b",
      method: "GET",
      address: "https://postman-echo.com/stream/10",
      data: {},
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Delay Response",
      id: "44f39536-76f5-4e03-b81c-0379efde126d",
      method: "GET",
      address: "https://postman-echo.com/delay/3",
      data: {
        test: "123"
      },
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;

        var data = JSON.parse(responseBody);

        tests["response body has key delay"] = "delay" in data;
      }
    });

    postman[Request]({
      name: "Get UTF8 Encoded Response",
      id: "dd29caa8-bba5-4515-baa9-6600add817e1",
      method: "GET",
      address: "https://postman-echo.com/encoding/utf8",
      data: {},
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "GZip Compressed Response",
      id: "da5fa480-1a63-4535-8af0-5a9e4f187207",
      method: "GET",
      address: "https://postman-echo.com/gzip",
      data: {
        code: "xWnkliVQJURqB2x1",
        grant_type: "authorization_code",
        redirect_uri: "https://www.getpostman.com/oauth2/callback",
        client_id: "abc123",
        client_secret: "ssh-secret"
      },
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;

        try {
          var data = JSON.parse(responseBody);
          tests["Body contains gzipped"] = responseBody.has("gzipped");
          tests["Body contains headers"] = responseBody.has("headers");
          tests["Body contains method"] = responseBody.has("method");
        } catch (e) {
          console.log("Cannot parse response,probably not a JSON");
        }
      }
    });

    postman[Request]({
      name: "Deflate Compressed Response",
      id: "ae234289-5f97-4f11-a2ae-fbf9e01da2e9",
      method: "GET",
      address: "https://postman-echo.com/deflate",
      data: {},
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;

        try {
          var data = JSON.parse(responseBody);
          tests["Body contains deflated"] = responseBody.has("deflated");
          tests["Body contains headers"] = responseBody.has("headers");
          tests["Body contains method"] = responseBody.has("method");
        } catch (e) {
          console.log("Cannot parse response,probably not a JSON");
        }
      }
    });
  });
}
